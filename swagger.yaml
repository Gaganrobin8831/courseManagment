openapi: 3.0.0
info:
  title: Admin API
  description: API for managing admin users and chat functionality
  version: 1.0.0
servers:
- url: http://localhost:5764
  description: Local development server

paths:
  /register:
    post:
      summary: "User registration"
      description: "Register a new user with name, email, and password."
      operationId: "handleRegister"
      tags:
      - "Auth"
      requestBody:
        description: "User information for registration"
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
              - name
              - email
              - password
      responses:
        '200':
          description: "User registered successfully"
        '400':
          description: "Already Registered"
        '500':
          description: "Error Occurred"

  /login:
    post:
      summary: "User login"
      description: "Log in an existing user using email and password."
      operationId: "handleLogin"
      tags:
      - "Auth"
      requestBody:
        description: "User credentials for login"
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
      responses:
        '200':
          description: "Studend Or Admin logged in successfully"
        '401':
          description: "Invalid Email or Password"
        '500':
          description: "Error Occurred"

  /logout:
    post:
      summary: "User logout"
      description: "Log out a user by invalidating their JWT token."
      operationId: "handleLogout"
      tags:
      - "Auth"
      security:
      - bearerAuth: []
      responses:
        '200':
          description: "User logged out successfully"
        '404':
          description: "User not found"
        '500':
          description: "Internal server error"

  /assign-course:
    post:
      summary: "Assign course to student"
      description: "Assign a course to a student using their studentId and courseId."
      operationId: "handleAssignCourses"
      tags:
      - "Admin"
      requestBody:
        description: "Data for assigning course to student"
        content:
          application/json:
            schema:
              type: object
              properties:
                studentId:
                  type: string
                courseId:
                  type: string
              required:
              - studentId
              - courseId
      responses:
        '200':
          description: "Course assigned to student successfully"
        '400':
          description: "Student or Course not found"
        '401':
          description: "Unauthorized"
        '500':
          description: "Error assigning course"

  /students/reports:
    get:
      summary: "Generate reports for all students"
      description: "Generate a report for all students."
      operationId: "handleGetReportsStudents"
      tags:
      - "Admin"
      security:
      - bearerAuth: []
      responses:
        '200':
          description: "Report generated successfully"
        '400':
          description: "Only Admin Can See All Students Detail"
        '500':
          description: "Error generating reports"

  /courses:
    post:
      summary: "Create a new course"
      description: "Create a course using name and description."
      operationId: "createCourse"
      tags:
      - "Course"
      requestBody:
        description: "Course information for creation"
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
              required:
              - name
              - description
      responses:
        '200':
          description: "Course created successfully"
        '400':
          description: "Only admin can create courses"
        '401':
          description: "Unauthorized"
        '500':
          description: "Error creating course"

  /getCourseProgress:
    post:
      summary: "Get course progress"
      description: "Get the progress of a course for a student using studentId and courseId."
      operationId: "getCourseProgress"
      tags:
      - "Course"
      requestBody:
        description: "Data for retrieving course progress"
        content:
          application/json:
            schema:
              type: object
              properties:
                studentId:
                  type: string
                courseId:
                  type: string
              required:
              - studentId
              - courseId
      responses:
        '200':
          description: "Courses fetched successfully"
        '400':
          description: "Only Admin Can See All Courses Detail"
        '401':
          description: "Unauthorized"
        '500':
          description: "Error fetching courses"

  /courses/{id}:
    get:
      summary: "Get course by ID"
      description: "Get details of a course by its ID."
      operationId: "getCourseById"
      tags:
      - "Course"
      parameters:
      - in: path
        name: id
        required: true
        description: "ID of the course"
        schema:
          type: string
      responses:
        '200':
          description: "Course details retrieved successfully"
        '400':
          description: "Bad request"
        '404':
          description: "Course not found"
        '500':
          description: "Error fetching course"

    put:
      summary: "Update course by ID"
      description: "Update a course's details using its ID and new data."
      operationId: "updateCourse"
      tags:
      - "Course"
      parameters:
      - in: path
        name: id
        required: true
        description: "ID of the course"
        schema:
          type: string
      requestBody:
        description: "Data for updating the course"
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
              required:
              - description
      responses:
        '200':
          description: "Course updated successfully"
        '400':
          description: "Bad request"
        '401':
          description: "Unauthorized"
        '404':
          description: "Course not found"
        '500':
          description: "Error updating course"

    delete:
      summary: "Delete course by ID"
      description: "Delete a course using its ID."
      operationId: "deleteCourse"
      tags:
      - "Course"
      parameters:
      - in: path
        name: id
        required: true
        description: "ID of the course"
        schema:
          type: string
      responses:
        '200':
          description: "Course deleted successfully and removed from students"
        '400':
          description: "Only Admin Can Delete Courses"
        '401':
          description: "Unauthorized"
        '404':
          description: "Course not found"
        '500':
          description: "Error deleting course"

    /quizzes:
    post:
      summary: "Create a new quiz"
      description: "Create a quiz with title, questions, duration, and pass threshold."
      operationId: "handleCreateQuiz"
      tags:
      - "Quiz"
      requestBody:
        description: "Quiz data"
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                questions:
                  type: array
                  items:
                    type: string
                duration:
                  type: integer
                passThreshold:
                  type: integer
              required:
              - title
              - questions
              - duration
              - passThreshold
      responses:
        '200':
          description: "Quiz created successfully"
        '400':
          description: "Bad request"
        '401':
          description: "Unauthorized"
        '500':
          description: "Internal server error"

  /quizzes:
      post:
        summary: "Create the  quize"
        description: "Create the  quize."
        operationId: "handleCreateQuiz"
        tags:
        - "Quiz"
        requestBody:
        description: "Quiz information for creation"
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                questions:
                   type: array
                duration:
                   type: number   
                passThreshold:
                   type: number
              required:
              - name
              - description
        responses:
          '200':
            description: "Quiz created successfully"
          '401':
            description: "Unauthorized"
          '400':
            description: "Quiz Already Exits"
          '500':
            description: "Error creating quiz"

  /quizzes/{id}:
    get:
      summary: "Get all quizzes"
      description: "Get all quizzes."
      operationId: "handleGetQuiz"
      tags:
      - "Quiz"
      responses:
        '200':
          description: "Quizzes retrieved successfully"
        '401':
          description: "Unauthorized"
        '500':
          description: "Error retrieving quizzes"

    put:
      summary: "Update a quiz"
      description: "Update a quiz using its ID."
      operationId: "handleEditQuiz"
      tags:
      - "Quiz"
      parameters:
      - in: path
        name: id
        required: true
        description: "ID of the quiz"
        schema:
          type: string
      requestBody:
        description: "Data for updating the quiz"
        content:
          application/json:
            schema:
              type: object
              properties:
                questions:
                  type: array
                  items:
                    type: string
                duration:
                  type: integer
                passThreshold:
                  type: integer
              required:
              - questions
              - duration
              - passThreshold
      responses:
        '200':
          description: "Quiz updated successfully"
        '400':
          description: "Only Admin Can Update Quizes"
        '401':
          description: "Unauthorized"
        '404':
          description: "Quiz not found"
        '500':
          description: "Error updating quiz"

    delete:
      summary: "Delete a quiz"
      description: "Delete a quiz using its ID and remove it from all lessons."
      operationId: "handleDeleteQuiz"
      tags:
      - "Quiz"
      parameters:
      - in: path
        name: id
        required: true
        description: "ID of the quiz"
        schema:
          type: string
      responses:
        '200':
          description: "Quiz deleted and references removed from lessons successfully"
        '400':
          description: "Only Admin Can Delete Quizes"
        '401':
          description: "Unauthorized"
        '404':
          description: "Quiz not found"
        '500':
          description: "Internal server error"

  /studentDetail:
    get:
      summary: "Get student details"
      description: "Get full details of the student using their ID."
      operationId: "handleStudentDetail"
      tags:
      - "Student"
      requestBody:
      description: "Quiz information for creation"
      content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string 
              required:
              - name
              - description
      responses:
        '200':
          description: "Student details retrieved successfully"
        '400':
          description: "Bad request"
        '404':
          description: "Student not found"
        '500':
          description: "Internal server error"

  /playQuiz/{quizId}:
    post:
      summary: "Start a quiz"
      description: "Play a quiz for the given quizId."
      operationId: "handlePlayQuiz"
      tags:
      - "Student"
      requestBody:
        description: "Quiz information for play"
        content:
          application/json:
            schema:
              type: object
              properties:
                studentId:
                  type: string
                lessonId:
                   type: string
              required:
              - name
              - description
      responses:
        '200':
          description: "Lesson and quizzes fetched and create progress successfully"
        '400':
          description: "Bad request"
        '404':
          description: "Lesson not found"
        '500':
          description: "Internal server error"

  /submitQuiz/{lessonId}:
    post:
      summary: "Submit a quiz"
      description: "Submit answers for a quiz given the lessonId and studentId."
      operationId: "handleSubmitQuiz"
      tags:
      - "Student"
      parameters:
      - in: path
        name: lessonId
        required: true
        description: "ID of the lesson"
        schema:
          type: string
      requestBody:
        description: "Answers and student data for quiz submission"
        content:
          application/json:
            schema:
              type: object
              properties:
                answers:
                  type: array
                  items:
                    type: string
                studentId:
                  type: string
              required:
              - answers
              - studentId
      responses:
        '200':
          description: "Quiz submitted successfully"
        '400':
          description: "Bad request"
        '401':
          description: "Unauthorized"
        '500':
          description: "Error submitting quiz"

  /lessonCompletion:
    get:
      summary: "Get lesson completion progress"
      description: "Get the completion status of a lesson for a student."
      operationId: "getLessonCompletion"
      tags:
      - "Student"
      responses:
        '200':
          description: "Lesson completion details fetched successfully"
        '400':
          description: "Bad request"
        '404':
          description: "Lesson not found"
        '500':
          description: "Internal server error"

  /lessons/{courseId}:
    post:
      summary: "Create a new lesson"
      description: "Create a new lesson for a course using title, content, and optional files (video, image, PDF) via Cloudinary."
      operationId: "handleCreateLesson"
      tags:
      - "Lesson"
      parameters:
      - in: path
        name: courseId
        required: true
        description: "ID of the course to assign the lesson"
        schema:
          type: string
      requestBody:
        description: "Lesson information for creation"
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                video:
                  type: string
                  format: binary
                image:
                  type: string
                  format: binary
                pdf:
                  type: string
                  format: binary
      responses:
        '200':
          description: "Lesson created successfully"
        '400':
          description: "Bad request"
        '404':
          description: "Course not found"
        '500':
          description: "Internal server error"

  /question:
    post:
      summary: Create a new question
      description: Creates a new question related to a quiz.
      operationId: createQuestion
      tags:
        - Question
      security:
        - bearerAuth: []
      requestBody:
        description: The question to be created.
        content:
          application/json:
            schema:
              type: object
              properties:
                quizId:
                  type: string
                  format: uuid
                  description: The ID of the quiz to which the question belongs.
                question:
                  type: string
                  description: The question text.
                options:
                  type: array
                  items:
                    type: string
                  description: The options for the question.
                correctAnswer:
                  type: string
                  description: The correct answer.
                questionType:
                  type: string
                  enum:
                    - MCQ
                    - True/False
                  description: The type of question.
      responses:
        '201':
          description: Question created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
        '400':
          description: Invalid input
        '500':
          description: Internal server error

    get:
      summary: Get all questions
      description: Fetch all questions from the database.
      operationId: getAllQuestions
      tags:
        - Question
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of questions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    quizId:
                      type: string
                    question:
                      type: string
                    options:
                      type: array
                      items:
                        type: string
                    correctAnswer:
                      type: string
                    questionType:
                      type: string
        '500':
          description: Internal server error

  /question/{id}:
    get:
      summary: Get a single question by ID
      description: Fetch a single question by its ID.
      operationId: getQuestionById
      tags:
        - Question
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the question
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Question retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  quizId:
                    type: string
                  question:
                    type: string
                  options:
                    type: array
                    items:
                      type: string
                  correctAnswer:
                    type: string
                  questionType:
                    type: string
        '404':
          description: Question not found
        '500':
          description: Internal server error

    put:
      summary: Update a question
      description: Update a question by its ID.
      operationId: updateQuestion
      tags:
        - Question
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the question
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Updated question data.
        content:
          application/json:
            schema:
              type: object
              properties:
                question:
                  type: string
                options:
                  type: array
                  items:
                    type: string
                correctAnswer:
                  type: string
                questionType:
                  type: string
                  enum:
                    - MCQ
                    - True/False
      responses:
        '200':
          description: Question updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
        '400':
          description: Invalid input
        '404':
          description: Question not found
        '500':
          description: Internal server error

    delete:
      summary: Delete a question by ID
      description: Delete a question by its ID.
      operationId: deleteQuestion
      tags:
        - Question
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the question
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Question deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '404':
          description: Question not found
        '500':
          description: Internal server error
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      
  schemas:
    Course:
      type: object
      properties:
        name:
          type: string
          description: The name of the course
        description:
          type: string
          description: A short description of the course
        createdBy:
          type: string
          format: uuid
          description: The ID of the student who created the course
        studentId:
          type: string
          format: uuid
          description: The ID of the student associated with the course
      required:
        - name
        - description
        - createdBy

    Lesson:
      type: object
      properties:
        title:
          type: string
          description: The title of the lesson
        content:
          type: string
          description: The content of the lesson
        video:
          type: string
          description: URL of the lesson video
        image:
          type: string
          description: URL of the lesson image
        pdf:
          type: string
          description: URL of the lesson PDF
        courseID:
          type: string
          format: uuid
          description: The ID of the course this lesson belongs to
      required:
        - title
        - content

    Quiz:
      type: object
      properties:
        title:
          type: string
          description: The title of the quiz
        duration:
          type: integer
          description: The duration of the quiz in minutes
        passThreshold:
          type: integer
          description: The percentage required to pass the quiz
        lessonId:
          type: string
          format: uuid
          description: The ID of the lesson this quiz belongs to
      required:
        - title
        - duration
        - passThreshold

    Question:
      type: object
      properties:
        quizId:
          type: string
          format: uuid
          description: The ID of the quiz to which this question belongs
        question:
          type: string
          description: The question text
        options:
          type: array
          items:
            type: string
          description: List of answer options
        correctAnswer:
          type: string
          description: The correct answer to the question
        questionType:
          type: string
          enum:
            - MCQ
            - True/False
          description: The type of the question
      required:
        - quizId
        - question
        - options
        - correctAnswer
        - questionType
